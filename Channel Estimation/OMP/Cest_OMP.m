%* ===============================================================
%* ###############################################################
%* 函数名: Cest_OMP
%* 创建人: 哈尔滨工程大学 黄嘉铭 
%* 创建时间: 2023/11/30
%* 程序功能: Cest_OMP返回OMP算法下的信道估计值与平方误差向量
%* 程序版本号: V1.0
%* 备注：
%*       信号形式请使用CP以将线性卷积转化为圆周卷积，输入的接收训练序列为TTDTT中
%        第二个T以保证首尾相同。
%* 输入：
%        train：     原始训练序列行向量
%        train_rec： 接收训练序列行向量
%        K：         稀疏度（多径个数）
%* 输出：
%        H_hat：     信道估计值
%        LS：        平方误差向量
%* ################################################################
%* ================================================================
function [H_hat,LS] = Cest_OMP(train,train_rec,K)
% A = DX
% X为实际信道，D为原始训练序列移位而来的圆周卷积矩阵，A为接收训练序列。利用A与D
% 推导X。
D = circonvmtx(train.',length(train));
A = train_rec.';
[H_hat,LS] = CS_OMP(D,A,K);
end
%* ===============================================================
%* ###############################################################
%* 函数名: circonvmtx
%* 创建人: 哈尔滨工程大学 黄嘉铭 
%* 创建时间: 2023/11/30
%* 程序功能: circonvmtx返回一个圆周卷积矩阵A，使A与向量x相乘等于A与x的圆周卷积
%* 程序版本号: V1.0
%* 输入：
%        H：    待转换列向量
%        N：    圆周卷积点数
%* 输出：
%        A：    圆周卷积矩阵
%* ################################################################
%* ================================================================
function A = circonvmtx(H,N)
A = zeros(N,N);
H_temp = [H;zeros(N-length(H),1)];
for k = 1:N
    A(:,k) = circshift(H_temp,k-1);
end
end
%* ===============================================================
%* ###############################################################
%* 函数名: CS_OMP
%* 创建人: 哈尔滨工程大学 黄嘉铭 
%* 创建时间: 2023/11/28
%* 程序功能: 本函数用于压缩感知稀疏信号的OMP恢复
%* 程序版本号: V1.0
%* 稀疏重构公式:A = Dx
%* 备注：已知A与D，x为待恢复稀疏向量
%* 输入：
%        D：    字典矩阵
%        A：    观测所得矩阵
%        K：    迭代次数(稀疏性)
%* 输出：
%        X_hat：稀疏恢复后的信号
%        LS：   平方误差向量
%* ################################################################
%* ================================================================
function [X_hat,LS] = CS_OMP(D,A,K)
[a,b] = size(D);
D_st = zeros(a,b);
for i = 1:length(D)
    D_st(:,i) = D(:,i)/sqrt(sum(D(:,i).^2));
end
f = A;
map = 1:length(D);             % 存储未使用原子（基信号）索引
index = zeros(1,K);            % 存储已使用原子（基信号）索引
LS = zeros(1,K);               % 平方误差
for ii =1:K
    [~,b] = max(abs(D_st(:,map).'*f));  % 看谁的贡献最大
    index(ii) = map(b);            % 存储贡献最大序号的顺序
    w = pinv(D(:,index(1:ii)))*A;  % 计算伪逆矩阵
    f = A - D(:,index(1:ii))*w;    % 计算误差
    LS(ii) = sum(f.^2);            % 存储平方误差
    map(b) = [];
end
X_hat(index) = w;                  %恢复后的稀疏矩阵
end
